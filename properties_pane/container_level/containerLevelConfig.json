/*
* Copyright © 2016-2019 by IntegrIT S.A. dba Hackolade.  All rights reserved.
*
* The copyright to the computer software herein is the property of IntegrIT S.A.
* The software may be used and/or copied only with the written permission of
* IntegrIT S.A. or in accordance with the terms and conditions stipulated in
* the agreement/contract under which the software has been supplied.


In order to define custom properties for any object's properties pane, you may copy/paste from the following,
making sure that you maintain a proper JSON format.

			{
				"propertyName": "Simple text",
				"propertyKeyword": "simpletextProp",
				"propertyType": "text",
				"sampleGen": "&containerName|&entityName|&random|<value>"
			},
			{
				"propertyName": "Text area",
				"propertyKeyword": "textareaProp",
				"propertyTooltip": "Popup for multi-line text entry",
				"propertyType": "details",
				"template": "textarea"
			},
			{
				"propertyName": "Dropdown selection",
				"propertyKeyword": "dropdownProp",
				"propertyTooltip": "Select from list of options",
				"propertyType": "select",
				"options": [
					"Option 1",
					"Option 2",
					"Option 3",
					"Option 4"
				]
			},
			{
				"propertyName": "Numeric",
				"propertyKeyword": "numericProp",
				"propertyValidate": true,
				"propertyType": "numeric",
				"valueType": "number",
				"allowNegative": false,
				"sampleGen": "&containerName|&entityName|&random|<value>"
			},
			{
				"propertyName": "Checkbox",
				"propertyKeyword": "checkboxProp",
				"propertyType": "checkbox"
			},
			{
				"propertyName": "Group",
				"propertyType": "group",
				"propertyKeyword": "grpProp",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Simple Grp Text",
						"propertyKeyword": "simpleGrpText",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Group Number",
						"propertyKeyword": "grpNumber",
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false
					}
				]
			},
// “groupInput” can have the following states - 0 items, 1 item, and many items.
// “blockInput” has only 2 states - 0 items or 1 item.
// This gives us an easy way to represent it as an object and not as an array internally which is beneficial for processing
// and forward-engineering in particular.
			{
				"propertyName": "Block",
				"propertyType": "block",
				"propertyKeyword": "grpProp",
				"propertyTooltip": "",
				"structure": [
					{
						"propertyName": "Simple Grp Text",
						"propertyKeyword": "simpleGrpText",
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Group Number",
						"propertyKeyword": "grpNumber",
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false
					}
				]
			},
			{
				"propertyName": "Field List",
				"propertyKeyword": "keyList",
				"propertyType": "fieldList",
				"template": "orderedList"
			},
			{
				"propertyName": "List with attribute",
				"propertyKeyword": "keyListOrder",
				"propertyType": "fieldList",
				"template": "orderedList",
				"attributeList": [
					"ascending",
					"descending"
				]
			}

*/

[
	{
		"lowerTab": "Details",
		"containerLevelKeys": [
			{
				"labelName": "Index",
				"propertyName": "Index",
				"propertyKeyword": "_index",
				"defaultName": "_index",
				"propertyPrimaryKey": true,
				"propertyType": "text",
				"typeName": "Data type",
				"typeOptions": ["string"],
				"defaultType": "string",
				"disabledFieldOption": true,
				"sampleGen": "&containerName"
			},
			{
				"labelName": "ID",
				"propertyName": "Document ID",
				"propertyKeyword": "docID",
				"defaultName": "_id",
				"propertyPrimaryKey": true,
				"propertyType": "text",
				"typeName": "Data type",
				"typeOptions": ["string"],
				"defaultType": "string",
				"disabledFieldOption": true,
				"sampleGen": "&random"
			},
			{
				"labelName": "Source",
				"propertyName": "source",
				"propertyKeyword": "source",
				"defaultName": "_source",
				"propertyPrimaryKey": false,
				"propertyType": "text",
				"valueType": "object",
				"typeName": "Data type",
				"typeOptions": ["object"],
				"defaultType": "object",
				"disabledFieldOption": true,
				"underERDDivider": true,
				"propertiesRoot": true
			}
		],
		"structure": [
			{
				"propertyName": "Number of shards",
				"propertyKeyword": "number_of_shards",
				"propertyTooltip": "The number of shards that an index should have.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Number of routing shards",
				"propertyKeyword": "number_of_routing_shards",
				"propertyTooltip": "The number of shards that a custom router should be aware of.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Number of replicas",
				"propertyKeyword": "number_of_replicas",
				"propertyTooltip": "The number of replicas each primary shard has.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Auto expand replicas",
				"propertyKeyword": "auto_expand_replicas",
				"propertyTooltip": "Auto-expand the number of replicas based on the number of data nodes in the cluster.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Refresh interval",
				"propertyKeyword": "refresh_interval",
				"propertyTooltip": "How often to perform a refresh operation, which makes recent changes to the index visible to search.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": true,
				"minValue": -1,
				"isTargetProperty": true
			},
			{
				"propertyName": "Refresh interval unit",
				"propertyKeyword": "refresh_interval_unit",
				"propertyTooltip": "Measurement unit of a refresh interval property",
				"propertyValidate": false,
				"propertyType": "select",
				"defaultValue": "s",
				"options": ["ms", "s", "m", "h", "d"],
				"isTargetProperty": false
			},
			{
				"propertyName": "Max result window",
				"propertyKeyword": "max_result_window",
				"propertyTooltip": "The maximum value of from + size for searches to this index.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max inner result window",
				"propertyKeyword": "max_inner_result_window",
				"propertyTooltip": "The maximum value of from + size for inner hits definition and top hits aggregations to this index.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max rescore window",
				"propertyKeyword": "max_rescore_window",
				"propertyTooltip": "The maximum value of window_size for rescore requests in searches of this index.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max docvalue fields search",
				"propertyKeyword": "max_docvalue_fields_search",
				"propertyTooltip": "The maximum number of docvalue_fields that are allowed in a query.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max script fields",
				"propertyKeyword": "max_script_fields",
				"propertyTooltip": "The maximum number of script_fields that are allowed in a query.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Routing partition size",
				"propertyKeyword": "routing_partition_size",
				"propertyTooltip": "The number of shards a custom routing value can go to.",
				"propertyValidate": false,
				"propertyType": "text",
				"isTargetProperty": true
			},
			{
				"propertyName": "Routing",
				"propertyKeyword": "routing",
				"propertyType": "details",
				"template": "textAreaJson",
				"propertyTooltip": "Routing allows you to route documents to shards based on the values of the document’s routing parameter.",
				"isTargetProperty": true
			},
			{
				"propertyName": "Soft deletes",
				"propertyKeyword": "soft_deletes",
				"propertyType": "details",
				"template": "textAreaJson",
				"propertyTooltip": "Soft deletes configuration.",
				"isTargetProperty": true
			},
			{
				"propertyName": "Codec",
				"propertyKeyword": "codec",
				"propertyTooltip": "The codec used to compress stored data on disk. Defaults to LZ4, but can also be set to best_compression which selects the best codec for each block independently.",
				"propertyValidate": false,
				"propertyType": "text",
				"isTargetProperty": true
			},
			{
				"propertyName": "Max ngam diff",
				"propertyKeyword": "max_ngram_diff",
				"propertyTooltip": "The maximum allowed difference between min_gram and max_gram for NGramTokenizer and NGramTokenFilter.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max shingle diff",
				"propertyKeyword": "max_shingle_diff",
				"propertyTooltip": "The maximum allowed difference between max_shingle_size and min_shingle_size for the shingle token filter.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max refresh listeners",
				"propertyKeyword": "max_refresh_listeners",
				"propertyTooltip": "Maximum number of refresh listeners available on each shard of the index. These listeners are used to implement refresh=wait_for.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max terms count",
				"propertyKeyword": "max_terms_count",
				"propertyTooltip": "The maximum number of terms that can be used in Terms Query.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "Max regex length",
				"propertyKeyword": "max_regex_length",
				"propertyTooltip": "The maximum length of regex that can be used in Regexp Query.",
				"propertyValidate": false,
				"propertyType": "numeric",
				"valueType": "integer",
				"allowNegative": false,
				"isTargetProperty": true
			},
			{
				"propertyName": "GC deletes",
				"propertyKeyword": "gc_deletes",
				"propertyTooltip": "The length of time that a deleted document’s version number remains available for further versioned operations.",
				"propertyValidate": false,
				"propertyType": "text",
				"isTargetProperty": true
			},
			{
				"propertyName": "Default pipeline",
				"propertyKeyword": "default_pipeline",
				"propertyTooltip": "Default ingest pipeline for the index. Index requests will fail if the default pipeline is set and the pipeline does not exist.",
				"propertyValidate": false,
				"propertyType": "text",
				"isTargetProperty": true
			},
			{
				"propertyName": "Final pipeline",
				"propertyKeyword": "final_pipeline",
				"propertyTooltip": "Final ingest pipeline for the index. Indexing requests will fail if the final pipeline is set and the pipeline does not exist.",
				"propertyValidate": false,
				"propertyType": "text",
				"isTargetProperty": true
			},
			{
				"propertyName": "Index blocks",
				"propertyKeyword": "blocks",
				"propertyType": "details",
				"template": "textAreaJson",
				"propertyTooltip": "Index blocks limit the kind of operations that are available on a certain index.",
				"isTargetProperty": true
			},
			{
				"propertyName": "Aliases",
				"propertyType": "group",
				"propertyKeyword": "aliases",
				"shouldValidate": false,
				"propertyTooltip": "The index aliases API allows aliasing an index with a name",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "name",
						"shouldValidate": false,
						"propertyTooltip": "",
						"propertyType": "text"
					},
					{
						"propertyName": "Filter",
						"propertyKeyword": "filter",
						"propertyValidate": false,
						"propertyType": "details",
						"propertyTooltip": "",
						"template": "textAreaJson"
					},
					{
						"propertyName": "Routing",
						"propertyKeyword": "routing",
						"shouldValidate": false,
						"propertyTooltip": "",
						"propertyType": "text"
					}
				]
			},
			{
				"propertyName": "Analyzers",
				"propertyTooltip": "The analyzer parameter specifies the analyzer used for text analysis when indexing or searching a text field.",
				"propertyType": "group",
				"propertyKeyword": "analyzers",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "name",
						"propertyTooltip": "The name of the analyzer",
						"propertyType": "text",
						"validation": {
							"minLength": 1
						}
					},
					{
						"propertyName": "Type",
						"propertyKeyword": "type",
						"propertyTooltip": "Select from list of built-in analyzers or custom",
						"propertyType": "select",
						"defaultValue": "standard",
						"options": [
							"custom",
							"standard",
							"simple",
							"whitespace",
							"stop",
							"keyword",
							"pattern",
							"fingerprint",
							"language"
						],
						"isTargetProperty": true
					},
					{
						"propertyName": "Language",
						"propertyKeyword": "language",
						"propertyTooltip": "The language of the analyzer",
						"propertyType": "select",
						"defaultValue": "english",
						"options": [
							"english",
							"french",
							"arabic",
							"armenian",
							"basque",
							"bengali",
							"brazilian",
							"bulgarian",
							"catalan",
							"cjk",
							"czech",
							"danish",
							"dutch",
							"estonian",
							"finnish",
							"galician",
							"german",
							"greek",
							"hindi",
							"hungarian",
							"indonesian",
							"irish",
							"italian",
							"latvian",
							"lithuanian",
							"norwegian",
							"persian",
							"portuguese",
							"romanian",
							"sorani",
							"spanish",
							"swedish",
							"turkish",
							"thai"
						],
						"dependency": {
							"key": "type",
							"value": "language"
						}
					},
					{
						"propertyName": "Max token length",
						"propertyKeyword": "maxTokenLength",
						"propertyValidate": true,
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"key": "type",
							"value": "standard"
						}
					},
					{
						"propertyName": "Pattern",
						"propertyTooltip": "A Java regular expression",
						"propertyType": "text",
						"propertyKeyword": "pattern",
						"dependency": {
							"key": "type",
							"value": "pattern"
						}
					},
					{
						"propertyName": "Flags",
						"propertyTooltip": "Java regular expression flags. Flags should be pipe-separated, eg \"CASE_INSENSITIVE|COMMENTS\".",
						"propertyType": "text",
						"propertyKeyword": "flags",
						"dependency": {
							"key": "type",
							"value": "pattern"
						}
					},
					{
						"propertyName": "Lowercase",
						"propertyTooltip": "Should terms be lowercased or not.",
						"propertyType": "checkbox",
						"propertyKeyword": "lowercase",
						"defaultValue": true,
						"dependency": {
							"key": "type",
							"value": "pattern"
						}
					},
					{
						"propertyName": "Separator",
						"propertyTooltip": "The character to use to concatenate the terms. Defaults to a space.",
						"propertyType": "text",
						"propertyKeyword": "separator",
						"dependency": {
							"key": "type",
							"value": "fingerprint"
						}
					},
					{
						"propertyName": "Max output size",
						"propertyKeyword": "maxOutputSize",
						"propertyTooltip": "The maximum token size to emit. Defaults to 255. Tokens larger than this size will be discarded.",
						"propertyValidate": true,
						"propertyType": "numeric",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"key": "type",
							"value": "fingerprint"
						}
					},
					{
						"propertyName": "Stop words path",
						"propertyTooltip": "The path to a file containing stop words.",
						"propertyType": "text",
						"propertyKeyword": "stopWordsPath",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "standard"
								},
								{
									"key": "type",
									"value": "stop"
								},
								{
									"key": "type",
									"value": "pattern"
								},
								{
									"key": "type",
									"value": "fingerprint"
								},
								{
									"key": "type",
									"value": "language"
								}
							]
						}
					},
					{
						"propertyName": "Pre-defined stop words list name",
						"propertyKeyword": "predefinedStopWordsList",
						"propertyTooltip": "A pre-defined stop words list like _english_",
						"propertyType": "text",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "standard"
								},
								{
									"key": "type",
									"value": "stop"
								},
								{
									"key": "type",
									"value": "pattern"
								},
								{
									"key": "type",
									"value": "fingerprint"
								},
								{
									"key": "type",
									"value": "language"
								}
							]
						}
					},
					{
						"propertyName": "Stop words",
						"propertyTooltip": "An array containing a list of stop words",
						"propertyType": "group",
						"propertyKeyword": "stopWordsList",
						"structure": [
							{
								"propertyName": "",
								"propertyKeyword": "stopWord",
								"propertyTooltip": "A stop word",
								"propertyType": "text"
							}
						],
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "standard"
								},
								{
									"key": "type",
									"value": "stop"
								},
								{
									"key": "type",
									"value": "pattern"
								},
								{
									"key": "type",
									"value": "fingerprint"
								},
								{
									"key": "type",
									"value": "language"
								}
							]
						}
					},
					{
						"propertyName": "Tokenizer",
						"propertyTooltip": "A built-in or customised tokenizer.",
						"propertyType": "select",
						"propertyKeyword": "tokenizer",
						"options": [
							"custom",
							"standard",
							"letter",
							"lowercase",
							"whitespace",
							"uax_url_email",
							"classic",
							"thai",
							"ngram",
							"edge_ngram",
							"keyword",
							"pattern",
							"simple_pattern",
							"char_group",
							"simple_pattern_split",
							"path_hierarchy"
						],
						"defaultValue": "standard",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "custom"
								},
								{
									"key": "type",
									"value": "language"
								}
							]
						}
					},
					{
						"propertyName": "Custom tokenizer name",
						"propertyTooltip": "The custom tokenizer name.",
						"propertyType": "text",
						"propertyKeyword": "customTokenizerName",
						"dependency": {
							"type": "and",
							"values": [
								{
									"key": "tokenizer",
									"value": "custom"
								},
								{
									"type": "or",
									"values": [
										{
											"key": "type",
											"value": "custom"
										},
										{
											"key": "type",
											"value": "language"
										}
									]
								}
							]
						}
					},
					{
						"propertyName": "Char filters",
						"propertyTooltip": "An optional array of built-in or customised character filters.",
						"propertyType": "group",
						"propertyKeyword": "charFilters",
						"structure": [
							{
								"propertyName": "Filter",
								"propertyTooltip": "A built-in or custom filter.",
								"propertyType": "select",
								"propertyKeyword": "filter",
								"options": ["custom", "html_strip", "mapping", "pattern_replace"]
							},
							{
								"propertyName": "Custom character filter name",
								"propertyTooltip": "The custom character filter name.",
								"propertyType": "text",
								"propertyKeyword": "customFilterName",
								"dependency": {
									"key": "filter",
									"value": "custom"
								}
							}
						],
						"dependency": {
							"key": "type",
							"value": "custom"
						}
					},
					{
						"propertyName": "Filters",
						"propertyTooltip": "An optional array of built-in or customised token filters.",
						"propertyType": "group",
						"propertyKeyword": "filters",
						"structure": [
							{
								"propertyName": "Filter",
								"propertyTooltip": "A built-in or custom filter.",
								"propertyType": "select",
								"propertyKeyword": "filter",
								"options": [
									"custom",
									"apostrophe",
									"asciifolding",
									"cjk_bigram",
									"cjk_width",
									"classic",
									"common_grams",
									"condition",
									"decimal_digit",
									"delimited_payload_filter",
									"dictionary_decompounder",
									"edge_ngram",
									"elision",
									"fingerprint",
									"flatten_graph",
									"hunspell",
									"hyphenation_decompounder",
									"icu_folding",
									"keep",
									"keep_types",
									"keyword_marker",
									"kstem",
									"length",
									"limit",
									"lowercase",
									"ngram",
									"nor",
									"pattern_capture",
									"pattern_replace",
									"porter_stem",
									"remove_duplicates",
									"reverse",
									"shingle",
									"snowball",
									"stemmer",
									"stemmer_override",
									"stop",
									"trim",
									"truncate",
									"unique",
									"uppercase",
									"word_delimiter"
								]
							},
							{
								"propertyName": "Custom filter name",
								"propertyTooltip": "The name of the custom filter.",
								"propertyType": "text",
								"propertyKeyword": "customFilterName",
								"dependency": {
									"key": "filter",
									"value": "custom"
								}
							}
						],
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "custom"
								},
								{
									"key": "type",
									"value": "language"
								}
							]
						}
					},
					{
						"propertyName": "Position increment gap",
						"propertyTooltip": "When indexing an array of text values, Elasticsearch inserts a fake \"gap\" between the last term of one value and the first term of the next value to ensure that a phrase query doesn’t match two terms from different array elements. Defaults to 100.",
						"propertyType": "numeric",
						"valueType": "integer",
						"allowNegative": false,
						"propertyKeyword": "positionIncrementGap",
						"dependency": {
							"key": "type",
							"value": "custom"
						}
					}
				]
			},
			{
				"propertyName": "Tokenizers",
				"propertyTooltip": "A tokenizer receives a stream of characters, breaks it up into individual tokens (usually individual words), and outputs a stream of tokens.",
				"propertyType": "group",
				"propertyKeyword": "tokenizers",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "name",
						"propertyTooltip": "The name of the tokenizer",
						"propertyType": "text",
						"validation": {
							"minLength": 1
						}
					},
					{
						"propertyName": "Type",
						"propertyKeyword": "type",
						"propertyTooltip": "Select from list of built-in tokenizers",
						"propertyType": "select",
						"defaultValue": "standard",
						"options": [
							"standard",
							"letter",
							"lowercase",
							"whitespace",
							"uax_url_email",
							"classic",
							"thai",
							"ngram",
							"edge_ngram",
							"keyword",
							"pattern",
							"simple_pattern",
							"char_group",
							"simple_pattern_split",
							"path_hierarchy"
						],
						"isTargetProperty": true
					},
					{
						"propertyName": "Max token length",
						"propertyKeyword": "maxTokenLength",
						"propertyValidate": true,
						"propertyType": "numeric",
						"propertyTooltip": "The maximum token length. If a token is seen that exceeds this length then it is split at max_token_length intervals.",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "standard"
								},
								{
									"key": "type",
									"value": "whitespace"
								},
								{
									"key": "type",
									"value": "uax_url_email"
								},
								{
									"key": "type",
									"value": "classic"
								},
								{
									"key": "type",
									"value": "char_group"
								}
							]
						}
					},
					{
						"propertyName": "Min gram",
						"propertyKeyword": "minGram",
						"propertyValidate": true,
						"propertyType": "numeric",
						"propertyTooltip": "Minimum length of characters in a gram.",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "ngram"
								},
								{
									"key": "type",
									"value": "edge_ngram"
								}
							]
						}
					},
					{
						"propertyName": "Max gram",
						"propertyKeyword": "maxGram",
						"propertyValidate": true,
						"propertyType": "numeric",
						"propertyTooltip": "Maximum length of characters in a gram.",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "ngram"
								},
								{
									"key": "type",
									"value": "edge_ngram"
								}
							]
						}
					},
					{
						"propertyName": "Token chars",
						"propertyKeyword": "tokenChars",
						"propertyType": "details",
						"template": "textAreaJson",
						"propertyTooltip": "Character classes that should be included in a token (letter, digit, whitespace, punctuation, symbol, custom). Elasticsearch will split on characters that don’t belong to the classes specified. Defaults to []",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "ngram"
								},
								{
									"key": "type",
									"value": "edge_ngram"
								}
							]
						}
					},
					{
						"propertyName": "Custom token chars",
						"propertyKeyword": "customTokenChars",
						"propertyType": "text",
						"propertyTooltip": "Custom characters that should be treated as part of a token. For example, setting this to +-_ will make the tokenizer treat the plus, minus and underscore sign as part of a token.",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "ngram"
								},
								{
									"key": "type",
									"value": "edge_ngram"
								}
							]
						}
					},
					{
						"propertyName": "Buffer size",
						"propertyKeyword": "bufferSize",
						"propertyValidate": true,
						"propertyType": "numeric",
						"propertyTooltip": "The number of characters read into the term buffer in a single pass. Defaults to 256. The term buffer will grow by this size until all the text has been consumed. It is advisable not to change this setting.",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"key": "type",
							"value": "keyword"
						}
					},
					{
						"propertyName": "Pattern",
						"propertyTooltip": "A Java regular expression",
						"propertyType": "text",
						"propertyKeyword": "pattern",
						"dependency": {
							"key": "type",
							"value": "pattern"
						}
					},
					{
						"propertyName": "Flags",
						"propertyTooltip": "Java regular expression flags. Flags should be pipe-separated, eg \"CASE_INSENSITIVE|COMMENTS\".",
						"propertyType": "text",
						"propertyKeyword": "flags",
						"dependency": {
							"key": "type",
							"value": "pattern"
						}
					},
					{
						"propertyName": "Group",
						"propertyKeyword": "group",
						"propertyType": "numeric",
						"propertyTooltip": "Which capture group to extract as tokens. Defaults to -1 (split).",
						"valueType": "number",
						"dependency": {
							"key": "type",
							"value": "pattern"
						}
					},
					{
						"propertyName": "Pattern",
						"propertyTooltip": "Lucene regular expression, defaults to the empty string",
						"propertyType": "text",
						"propertyKeyword": "lucenePattern",
						"dependency": {
							"type": "or",
							"values": [
								{
									"key": "type",
									"value": "simple_pattern"
								},
								{
									"key": "type",
									"value": "simple_pattern_split"
								}
							]
						}
					},
					{
						"propertyName": "Tokenize on chars",
						"propertyKeyword": "tokenizeOnChars",
						"propertyType": "details",
						"template": "textAreaJson",
						"propertyTooltip": "A list containing a list of characters to tokenize the string on. Whenever a character from this list is encountered, a new token is started. This accepts either single characters like e.g. -, or character groups: whitespace, letter, digit, punctuation, symbol.",
						"dependency": {
							"key": "type",
							"value": "char_group"
						}
					},
					{
						"propertyName": "Delimiter",
						"propertyTooltip": "The character to use as the path separator. Defaults to /.",
						"propertyType": "text",
						"propertyKeyword": "delimiter",
						"dependency": {
							"key": "type",
							"value": "path_hierarchy"
						}
					},
					{
						"propertyName": "Replacement",
						"propertyTooltip": "An optional replacement character to use for the delimiter. Defaults to the delimiter.",
						"propertyType": "text",
						"propertyKeyword": "replacement",
						"dependency": {
							"key": "type",
							"value": "path_hierarchy"
						}
					},
					{
						"propertyName": "Buffer size",
						"propertyKeyword": "pathBufferSize",
						"propertyValidate": true,
						"propertyType": "numeric",
						"propertyTooltip": "The number of characters read into the term buffer in a single pass. Defaults to 1024. The term buffer will grow by this size until all the text has been consumed. It is advisable not to change this setting.",
						"valueType": "number",
						"allowNegative": false,
						"dependency": {
							"key": "type",
							"value": "path_hierarchy"
						}
					},
					{
						"propertyName": "Reverse",
						"propertyTooltip": "If true, uses Lucene’s ReversePathHierarchyTokenizer, which is suitable for domain–like hierarchies. Defaults to false.",
						"propertyType": "checkbox",
						"propertyKeyword": "reverse",
						"defaultValue": false,
						"dependency": {
							"key": "type",
							"value": "path_hierarchy"
						}
					},
					{
						"propertyName": "Skip",
						"propertyKeyword": "skip",
						"propertyType": "numeric",
						"propertyTooltip": "The number of initial tokens to skip. Defaults to 0.",
						"valueType": "number",
						"dependency": {
							"key": "type",
							"value": "path_hierarchy"
						}
					}
				]
			},
			{
				"propertyName": "Filters",
				"propertyKeyword": "filters",
				"propertyType": "group",
				"propertyTooltip": "Token filters accept a stream of tokens from a tokenizer and can modify tokens (eg lowercasing), delete tokens (eg remove stopwords) or add tokens (eg synonyms).",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "name",
						"propertyTooltip": "The name of the filter",
						"propertyType": "text",
						"validation": {
							"minLength": 1
						}
					},
					{
						"propertyName": "Config",
						"propertyKeyword": "config",
						"propertyType": "details",
						"template": "textAreaJson",
						"propertyTooltip": "Configurable parameters for the filter"
					}
				]
			},
			{
				"propertyName": "Character filters",
				"propertyKeyword": "characterFilters",
				"propertyType": "group",
				"propertyTooltip": "Character filters are used to preprocess the stream of characters before it is passed to the tokenizer.",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "name",
						"propertyTooltip": "The name of the filter",
						"propertyType": "text",
						"validation": {
							"minLength": 1
						}
					},
					{
						"propertyName": "Config",
						"propertyKeyword": "config",
						"propertyType": "details",
						"template": "textAreaJson",
						"propertyTooltip": "Configurable parameters for the filter"
					}
				]
			},
			{
				"propertyName": "Normalizers",
				"propertyKeyword": "normalizers",
				"propertyType": "group",
				"propertyTooltip": "A normalizer is similar to an analyzer except that it guarantees that the analysis chain produces a single token. The token can then be used in sorting, aggregations, or queries that require exact matches.",
				"structure": [
					{
						"propertyName": "Name",
						"propertyKeyword": "name",
						"propertyTooltip": "The name of the normalizer",
						"propertyType": "text",
						"validation": {
							"minLength": 1
						}
					},
					{
						"propertyName": "Config",
						"propertyKeyword": "config",
						"propertyType": "details",
						"template": "textAreaJson",
						"propertyTooltip": "Configurable parameters for the normalizer"
					}
				]
			},
			{
				"propertyName": "Description",
				"propertyKeyword": "description",
				"shouldValidate": false,
				"propertyTooltip": "description",
				"propertyType": "details",
				"template": "textarea"
			},
			{
				"propertyName": "Comments",
				"propertyKeyword": "comments",
				"shouldValidate": false,
				"propertyTooltip": "comments",
				"propertyType": "details",
				"template": "textarea"
			}
		]
	}
]
